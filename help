def linearSvm(X, y):
    clf = LinearSVC(random_state=0, tol=1e-5,max_iter=10000)
    #clf_cv_score = cross_val_score(clf, X, y, cv=10, scoring='roc_auc')
    #print("=== Mean AUC Score ===")
    #print("Mean AUC Score - linearSvm: ", clf_cv_score.mean())
    clf_cv = cross_val_score(clf, X, y, cv=10)
    print("=== Mean accuracy  ===")
    print("Mean accuracy Score - linearSvm: ", clf_cv.mean())
    return(clf_cv.mean())

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score

def knn(X, y):
    clf = KNeighborsClassifier(n_neighbors=3)
    #clf_cv_score = cross_val_score(clf, X, y, cv=10, scoring='roc_auc')
    #print("=== Mean AUC Score ===")
    #print("Mean AUC Score - linearSvm: ", clf_cv_score.mean())
    clf_cv = cross_val_score(clf, X, y, cv=10)
    print("=== Mean accuracy  ===")
    print("Mean accuracy Score - KNN: ", clf_cv.mean())
    return(clf_cv.mean())

from sklearn.model_selection import cross_val_score
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import GaussianNB
def nb(X, y):
    clf = GaussianNB()
    #clf_cv_score = cross_val_score(clf, X, y, cv=10, scoring='roc_auc')
    #print("=== Mean AUC Score ===")
    #print("Mean AUC Score - linearSvm: ", clf_cv_score.mean())
    clf_cv = cross_val_score(clf, X, y, cv=10)
    print("=== Mean accuracy  ===")
    print("Mean accuracy Score - NB: ", clf_cv.mean())
    return(clf_cv.mean())

import time

temp_res=[]
#lap score for i=1 to k
for i in range(1,k+1):
    start = time.time()
    #construct affinity matrix
    kwargs_W = {"metric": "euclidean", "neighbor_mode": "knn", "weight_mode": "heat_kernel", "k": k, 't': 1}
    W = construct_W.construct_W(data1, **kwargs_W)

    # obtain the scores of features
    score = lap_score.lap_score(data1, W=W)
    ranking=list(score)[:i]
    end = time.time()
    data_cut=data.iloc[:,ranking]#topk acording to ranking
    data_cut.columns = [''] * len(data_cut.columns)
    accuracy=nb(data_cut, y)
    temp_res.append([i,end-start,accuracy])
    print(ranking)

temp_res=[]
for i in range(1,k+1):
    start = time.time()
    # obtain the scores of features
    score = MRMR.mrmr(data1,y1, n_selected_features=i)
    ranking=list(score)[:i]
    end = time.time()
    data_cut=data.iloc[:,ranking]#topk acording to ranking
    data_cut.columns = [''] * len(data_cut.columns)
    accuracy=nb(data_cut, y)
    temp_res.append([i,end-start,accuracy])
    print(ranking)
res_Mrmr=pd.DataFrame(temp_res,columns=['k','time','accuracy'])
